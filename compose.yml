services:
  stream-duck-bi:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/app
    networks:
      stream_duck_net:
    depends_on:
      - minio
    environment:
      - MINIO_ACCESS_KEY_ID=$MINIO_ACCESS_KEY_ID
      - MINIO_SECRET_ACCESS_KEY=$MINIO_SECRET_ACCESS_KEY
      - MINIO_BUCKET=$MINIO_BUCKET
      - AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
    entrypoint: /bin/sh -c "tail -f /dev/null"
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=$MINIO_ROOT_USER
      - MINIO_ROOT_PASSWORD=$MINIO_ROOT_PASSWORD
      - MINIO_DOMAIN=$MINIO_DOMAIN
      - TZ=$TZ
    networks:
      stream_duck_net:
        aliases:
          - warehouse.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      stream_duck_net:
    environment:
      - AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_ACCESS_KEY
      - AWS_REGION=$AWS_REGION
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/warehouse;
      /usr/bin/mc mb minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "
networks:
  stream_duck_net:
